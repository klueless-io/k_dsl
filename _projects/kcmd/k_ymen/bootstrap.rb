KDsl.structure :bootstrap do
  microapp     = import(:k_ymen, :microapp)

  is_bundle_gem        = 1
  is_bundle_setup      = 0
  is_bootstrap_cmdlet  = 0
  is_open_git          = 0
  is_customisations    = 0

  settings do
    name                parent.key
    type                parent.type
    template_rel_path   'ruby-cmdlet'
    description         microapp.settings.description
  end

  blueprint :bundle_setup do
    fields [:template_name, f(:output, '$TEMPLATE_NAME$'), f(:command, 'generate'), f(:active, true), f(:conflict, 'overwrite'), f(:after_write, '')]

    row '.gitignore'

    row 'bin/k'
    row 'bin/khotfix'
    row 'bin/kgitsync'

    row 'hooks/pre-commit'
    row 'hooks/update-version'

    row 'bin/runonce/common.sh'
    row 'bin/runonce/setup-chmod.sh', command: 'execute'
    row 'bin/runonce/setup-git.sh', command: 'execute'
  end

  blueprint :bootstrap_cmdlet do
    fields [:template_name, f(:output, '$TEMPLATE_NAME$'), f(:command, 'generate'), f(:active, true), f(:conflict, 'overwrite'), f(:after_write, '')]

    # ADD EXE (executable)
    row 'exe/cmdlet_name', 'exe/k_ymen'

    # ADD EXT (extensions)
    row 'ext/cmdlet_name/cmdlet_name.c', 'ext/k_ymen/k_ymen.c'
    row 'ext/cmdlet_name/cmdlet_name.h', 'ext/k_ymen/k_ymen.h'
    row 'ext/cmdlet_name/extconf.rb', 'ext/k_ymen/extconf.rb'

    row 'bin/setup'
    row 'bin/console'

    # Setup CLI and command execution
    row 'lib/cmdlet_name.rb'              , 'lib/k_ymen.rb'
    row 'lib/cmdlet_name/version.rb'      , 'lib/k_ymen/version.rb', conflict: 'skip'
    row 'lib/cmdlet_name/cli.rb'          , 'lib/k_ymen/cli.rb'
    row 'lib/cmdlet_name/app.rb'          , 'lib/k_ymen/app.rb'
    row 'lib/cmdlet_name/command.rb'      , 'lib/k_ymen/command.rb'

    row '.keep'                           , 'lib/k_ymen/commands/.keep'
    row '.keep'                           , 'lib/k_ymen/templates/.keep'

    row 'spec/spec_helper.rb'
    row 'spec/cmdlet_name_spec.rb'        , 'spec/k_ymen_spec.rb'
    
    row '.rspec'
    row '.travis.yml'                     , command: 'delete', note: 'this was generated by bundle gem'
    row 'CODE_OF_CONDUCT.md'
    row 'Gemfile'
    row 'LICENSE.txt'
    row 'cmdlet_name.gemspec'               , 'k_ymen.gemspec'
    row 'Rakefile'
    row 'README.md'
    row 'Guardfile'
    row '.rubocop.yml'

    row 'bin/runonce/hotfix-final.sh'     , command: 'execute'
    row 'bin/runonce/setup.sh'            , after_write: 'open'

    # row '', conflict: 'compare'
  end

  blueprint :custom do
    fields [:template_name, f(:output, '$TEMPLATE_NAME$'), f(:command, 'generate'), f(:active, true), f(:conflict, 'compare'), f(:after_write, 'open')]

    # row 'README.md'#, conflict: 'overwrite'
    # row '.rubocop.yml'
  end

  actions do
    if is_bundle_gem == 1
      run_command 'bundle gem --coc --test=rspec --mit k_ymen', command_creates_top_folder: true
    end
    if is_bundle_setup == 1
      run_blueprint blueprint: :bundle_setup        , microapp: microapp
    end
    if is_bootstrap_cmdlet == 1
      run_blueprint blueprint: :bootstrap_cmdlet    , microapp: microapp 
    end
    if is_open_git == 1
      run_command "open -a 'Google Chrome' https://github.com//k_ymen"
    end
    if is_customisations == 1
      run_blueprint blueprint: :custom              , microapp: microapp
    end

    # write_json is_edit: true
  end
end
